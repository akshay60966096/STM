//AUTOMAED GOOGLE SEARCH #1

import { Builder, Browser, By, Key } from 'selenium-webdriver'

async function searchGoogle() {
  // Create a new driver
  let driver = await new Builder().forBrowser('chrome').build();
  await driver.get('https://www.google.com');
  
  // Search
  const searchBox = await driver.findElement(By.name('q'));
  await searchBox.sendKeys('Selenium Node.js', Key.RETURN);

  // Close the browser after waiting 10 seconds
  await driver.sleep(10*1000);
  await driver.quit();
}

searchGoogle();

-------------------------------------------------------------------------------------------------------

// TEXT EXTRACTION #2

import { Builder, By, Browser } from "selenium-webdriver";

async function getText() {
  // Create a new driver
  let driver = await new Builder().forBrowser('chrome').build();
  await driver.get('https://www.example.com');
  
  // Get Heading 
  let text = await driver.findElement(By.tagName('h1')).getText();
  console.log("Heading text:", text);
  
  // Get Paragraph
  text = await driver.findElement(By.tagName('p')).getText();
  console.log("Paragraph text:", text);

  // Close the browser
  await driver.sleep(5*1000);
  await driver.quit();
  return text;
}

getText();

-------------------------------------------------------------------------------------------------------

//NAVIGATION #3 FBR


import { Builder, Browser } from "selenium-webdriver";

async function bfr() {
  let driver = await new Builder().forBrowser('chrome').build();

  // Go to a page
  await driver.get('https://www.example.com');
  console.log('Example page visited');
  
  await driver.sleep(2*1000);

  await driver.navigate().back();
  console.log('Navigated back');

  await driver.sleep(2*1000);

  await driver.navigate().forward();
  console.log('Navigated forward');

  await driver.sleep(2*1000);

  await driver.navigate().refresh();
  console.log('Page refreshed');

  await driver.sleep(2*1000);
  
  await driver.quit();
  console.log('Browser closed');
}

bfr();

-------------------------------------------------------------------------------------------------------

//COUNT HYPERLINKS #4


import { Builder, Browser, By } from 'selenium-webdriver';

async function getLinkCount() {
  const driver = await new Builder().forBrowser('chrome').build();
  await driver.get('https://www.npmjs.com/package/selenium-webdriver');
  
  const links = await driver.findElements(By.tagName('a'));
  console.log(`Number of links: ${links.length}`);

  // Optional
  for (let link of links) {
    console.log(await link.getAttribute('href'));
  }

  await driver.sleep(10*1000);
  await driver.quit();
}

getLinkCount();

7. What is Win Runner explain about it's functionalities.
	WinRunner is a Windows-based software testing tool used for automated functional testing of applications. It allowed QA testers to record, verify, and replay user interactions with the GUI to identify defects in the application under test.
Details:
•	Full Name: HP WinRunner
•	Platform: Windows
•	Script Language: TSL (Test Script Language) – a C-like proprietary scripting language
•	Successor: HP Unified Functional Testing (UFT), previously known as QuickTest Professional (QTP)


//AUTOMATED LOGIN TESTING #5


import { Builder, Browser, By, Key } from "selenium-webdriver";

async function test() {
  const driver = await new Builder().forBrowser('chrome').build();
  await driver.get('https://practicetestautomation.com/practice-test-login/');

  await driver.findElement(By.id('username')).sendKeys('student', Key.RETURN);
  await driver.findElement(By.id('password')).sendKeys('Password123', Key.RETURN);
  await driver.findElement(By.id('submit')).click();

  await driver.sleep(3*1000);
  const status = await driver.findElement(By.className('post-title')).getText();
  console.log(status);

  await driver.sleep(5*1000);
  await driver.quit();
}

test();

-------------------------------------------------------------------------------------------------------

//SCREEN SHOT #6


const { Builder, By } = require('selenium-webdriver');
const fs = require('fs');
const sleep = ms => new Promise(r => setTimeout(r, ms));
async function captureScreenshot() { 
 const driver = await new Builder().forBrowser('chrome').build();
 try { 
 await driver.get('https://www.wikipedia.org');
 await sleep(2000);
 const screenshot = await driver.takeScreenshot();
 fs.writeFileSync('wiki_screenshot.png', screenshot, 'base64');
 console.log('Screenshot saved.');
 } catch (err) { 
 console.error('Capture failed:', err.message);
 } finally { 
 await driver.quit();
 } 
} 
captureScreenshot();


-------------------------------------------------------------------------------------------------------


7. What is Win Runner explain about it's functionalities.
	WinRunner is a Windows-based software testing tool used for automated functional testing of applications. It allowed QA testers to record, verify, and replay user interactions with the GUI to identify defects in the application under test.
Details:
•	Full Name: HP WinRunner
•	Platform: Windows
•	Script Language: TSL (Test Script Language) – a C-like proprietary scripting language
•	Successor: HP Unified Functional Testing (UFT), previously known as QuickTest Professional (QTP)

Core Functionalities of WinRunner
1. Record and Playback
•	Records user actions on a GUI (mouse clicks, keystrokes)
•	Generates test scripts automatically
•	Allows playback for regression testing

2. Test Script Language (TSL)
•	A scripting language used to customize and enhance tests
•	Enables creation of complex conditional logic, loops, parameterization, etc.

3. GUI Map
•	Stores information about GUI objects in the application
•	Allows testers to interact with UI elements via logical names

4. Checkpoints
•	Built-in feature to verify application behavior
•	Types of checkpoints:
o	GUI Checkpoints: Verify properties of GUI objects
o	Bitmap Checkpoints: Compare screen snapshots
o	Database Checkpoints: Validate backend database values
o	Text Checkpoints: Validate static text on the screen

5. Synchronization
•	Ensures that test execution waits for the application to reach a ready state
•	Helps avoid flaky tests due to timing issues

6. Data-Driven Testing
•	Allows testers to separate test logic from test data
•	Uses external data sources (Excel, text files, databases) to run the same test with multiple input sets

7. Error Handling
•	Provides tl_step, tl_exit, and exception handling mechanisms
•	Allows graceful test continuation or termination on error

8. Integration with TestDirector
•	WinRunner was often used alongside TestDirector (later HP Quality Center, now Micro Focus ALM)
•	Supported test management, defect tracking, and reporting
________________________________________
Why It Was Discontinued
•	Outdated technology (WinRunner supported only Windows GUI apps)
•	No support for modern technologies like web, mobile, or cloud apps
•	Replaced by more powerful and flexible tools like QTP/UFT and modern frameworks (e.g., Selenium, Cypress)
________________________________________
Legacy and Relevance
Although WinRunner is no longer used in modern QA teams, its influence persists:
•	Introduced foundational concepts such as:
o	GUI object recognition
o	Data-driven testing
o	Checkpointing
•	These concepts remain integral to tools such as UFT, Selenium, and others.


